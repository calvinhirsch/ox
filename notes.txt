rather than a single iteration be checking blocks e.g., [a-1,b-1,c] , [a-1,b,c] , [a,b,c]
it should check [a-1,b-1,c-1] , [a-1,b-1,c] , [a-1,b,c] that way it's always checking blocks
at the same 'a' value in the same iteration. then there needs to be some special logic for
handling the case where you start at a non-integer 'a' value.


TO-DO rust:
 - Look into whether chunk loading would break if you skip the buffer chunk loading zone at the edge of chunk
 - Look into using Pin for making sure World doesn't move during chunk loading--or make some function that owns world so user cannot move it
 - Macros for
    - Deriving DataComponentWrapper
    - Deriving DataComponentSet if all struct members are DataComponentWrapper or DataComponent (?)
    - Defining custom physical memory grid / virtual memory grid when members are all also grids
 - Consider making top level chunk bitmask data its own thing and separating it out from lods
 - Consider, instead of having a loaded bool for chunks, have an enum type for loaded/unloaded/placeholder -- although this
   may be complicated by the fact that each LOD has its own loaded state
 - Make all vecs slices (or better yet, arrays) where they can be

TO-DO shader:
 - Fix infinite loop while tracing ray. Happens at lvl 0 iteration 0 after 2-3 bounces
 - Experiment with loading material and doing ray bounce inside the inner loop

Plans:
 - Configurable terrain generation function at any LOD
 - Sub-voxels


For debugging: use qrenderdoc
For profiling GPU: use Nsight graphics (ngfx-ui), usually have to launch as root to use GPU trace profiler
